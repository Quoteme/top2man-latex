% Topological 2-Manifold Visualization Package
%
% (c) 2021 Luca Leon Happel
%
\NeedsTeXFormat{LaTeX2e}[1994/06/01]
\ProvidesPackage{top2man}
  [2021/06/22 v0.01 Topological 2-Manifold visualization]

% TODO: Links to top2man html hinzufÃ¼gen

\RequirePackage{tikz}
\RequirePackage{pgfplots}
\RequirePackage{hyperref}
\pgfplotsset{compat=newest}

\newcommand{\orientableTwoManifold}[1]{
	\href{https://quoteme.github.io/top2man/?orientable=true\&genus=#1}{
		\begin{tikzpicture}
			\begin{axis}[
				axis equal image,
				hide axis,
				z buffer = sort,
				view = {122}{30},
				scale = 1.5
				]
				% Sphere
				\ifnum #1=0
					\@sphere{}
				\fi
				% Torus
				\ifnum #1>0
					\foreach \i in {1,...,#1}{
						\@torus{0}{6*\i}
					}
				\fi
			\end{axis}
		\end{tikzpicture}
	}
}

\newcommand{\unorientableTwoManifold}[1]{
	\href{https://quoteme.github.io/top2man/?orientable=false\&genus=#1}{
		\begin{tikzpicture}
			\begin{axis}[
				axis equal image,
				hide axis,
				z buffer = sort,
				view = {122}{27},
				scale = 1.5
				]
				% Projective Plane
				\ifnum #1=1
					\@projectivePlane{}
				\fi
				% Klein-Bottle
				\ifnum #1=2
					\@kleinBottle{}
				\fi
				% Higher-demigenus Manifold
			\end{axis}
		\end{tikzpicture}
	}
}

\newcommand{\@sphere}[0]{
	\addplot3[
		surf,
		shader = interp,
		samples = 20,
		samples y = 30,
		domain = -1:1,
		domain y = 0:2*pi,
		thin,
	](
		{sin(deg(\y))*sqrt(1-\x^2)},
		{cos(deg(\y))*sqrt(1-\x^2)},
		{\x}
	);
}

\newcommand{\@torus}[2]{
	\addplot3[
		surf,
		shader = interp,
		samples = 20,
		samples y = 30,
		domain = 0:2*pi,
		domain y = 0:2*pi,
		thin,
	](
		{#1+(3+sin(deg(\x)))*cos(deg(\y))},
		{#2+(3+sin(deg(\x)))*sin(deg(\y))},
		{cos(deg(\x))}
	);
}

\newcommand{\@projectivePlane}[0]{
	\addplot3[
		surf,
		shader = interp,
		z buffer = sort,
		samples = 30,
		samples y = 30,
		domain = 0:2*pi,
		domain y = 0:pi,
		thin,
	](
		{-(cos(deg(\y/2))^2 - cos(deg(\x))^2*sin(deg(\y/2))^2)/2},
		{cos(deg(\x))*sin(deg(\y))/2},
		{sin(deg(\x))*sin(deg(\y))/2}
	);
}

\newcommand{\@kleinBottle}[0]{
	\addplot3[
		surf,
		shader = interp,
		z buffer = sort,
		samples = 30,
		samples y = 30,
		domain = 0:pi,
		domain y = 0:pi*2,
		thin,
	](
		{-(cos(deg(\y/2))^2 - cos(deg(\x))^2*sin(deg(\y/2))^2)/2},
		{cos(deg(\x))*sin(deg(\y))/2},
		{sin(deg(\x))*sin(deg(\y))/2}
	);
}

% \newcommand{\exampleGraph}[0]
% altes pgfplots zeugs
	% \begin{tikzpicture}
	% 	\begin{axis}[
	% 		restrict z to domain = -12:12
	% 		view/el = 45
	% 		]
	% 	\addplot3[
	% 		samples = 70,
	% 		domain = -0.5:0.5
	% 		]
	% 	{x^2*y};
	% 	\end{axis}
	% \end{tikzpicture}

% \begin{tikzpicture}
% 		\ifnum #1=0
% 		% Sphere
% 			\shadedraw[shading=ball,ball color=purple, white] (6.5,0) circle (1.5);
% 		\fi
% 		\ifnum #1=1
% 		% Toru
% 			\foreach \x in {90,89,...,-90} { % change 89 to 80 or 45 for speed
% 			% \elrad is the x-radius of the ellipse (technically, a circle seen
% 			% from side on at angle \x).  The 'max' is because at small angles
% 			% then the real ellipse is too thin and the torus doesn't ``fill
% 			% out'' nicely.
% 			\pgfmathsetmacro\elrad{20*max(cos(\x),.1)}
% 			% We draw the torus from the back to the front to get the right
% 			% layering effect.  To tint it, we define colours according to the
% 			% angle, but need different colours for the left and right pieces.
% 			% It'd be nice if the xcolor colour specification could take something
% 			% computed by pdfmath, such as {red!\tint} but it doesn't appear to
% 			% work, so we define the colours explicitly.
% 			\pgfmathsetmacro\ltint{.9*abs(\x-45)/180}
% 			\pgfmathsetmacro\rtint{.9*(1-abs(\x+45)/180)}
% 			\definecolor{currentcolor}{rgb}{\ltint, 0, \ltint}
% 			% This draws the right-hand circle.
% 			\draw[color=currentcolor,fill=currentcolor]
% 				(xyz polar cs:angle=\x,y radius=.75,x radius=1.5)
% 				ellipse (\elrad pt and 20pt);
% 			% This sets the colour correctly for the left-hand circle ...
% 			\definecolor{currentcolor}{rgb}{\rtint, 0, \rtint}
% 			% ... and draws it
% 			\draw[color=currentcolor,fill=currentcolor]
% 				(xyz polar cs:angle=180-\x,radius=.75,x radius=1.5)
% 				ellipse (\elrad pt and 20pt);
% 			% End of foreach statement
% 			}
% 		\fi
% 	\end{tikzpicture}
